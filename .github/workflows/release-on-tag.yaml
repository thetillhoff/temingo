name: Release on tag

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  prerequisites:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.2
        with:
          ref: main

      - name: Check whether elements exist for the current release-tag in CHANGELOG.md
        shell: bash
        run: |
          grep "${GITHUB_REF##*/}" CHANGELOG.md

      - name: Delete version-tag when CHANGELOG.md doesn't contain information about it
        if: failure()
        shell: bash
        run: |
          git config --global user.name 'GithubActions'
          git config --global user.email 'githubactions@users.noreply.github.com'
          git push --delete origin ${{ env.RELEASE_TAG }}

  build:
    needs: prerequisites
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        os:
          - linux
          - windows
          - darwin
        architecture:
          - amd64
    steps:
      - name: Set environment variables
        shell: bash
        run: |
          echo "APP_NAME=${PWD##*/}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
          if [[ ${{ matrix.os }} == "windows" ]]; then
            echo "FILE_EXTENSION=.exe" >> $GITHUB_ENV
          else
            echo "FILE_EXTENSION=" >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v2.3.2
        with:
          ref: main

      - name: Set golang version
        uses: actions/setup-go@v2
        with:
          go-version: "1.16.3"

      - name: Compile binary by defined matrix
        shell: bash
        run: |
          echo "os: ${{ matrix.os }}"
          echo "architecture: ${{ matrix.architecture }}"
          go version

          env GOOS=${{ matrix.os }} GOARCH=${{ matrix.architecture }} go build -o ./${{ env.APP_NAME }}_${{ matrix.os }}_${{ matrix.architecture }}${{ env.FILE_EXTENSION }}
          # If FILE_EXTENSION is empty, there is no need to make the binary executable, because it is for windows.
          if test -z "${{ env.FILE_EXTENSION }}"; then chmod +x ./${{ env.APP_NAME }}_${{ matrix.os }}_${{ matrix.architecture }}${{ env.FILE_EXTENSION }}; fi

      - name: Upload artifact
        uses: 'actions/upload-artifact@v2'
        with:
            name: artifact_${{ env.APP_NAME }}_${{ matrix.os }}_${{ matrix.architecture }}
            path: ./${{ env.APP_NAME }}_${{ matrix.os }}_${{ matrix.architecture }}${{ env.FILE_EXTENSION }}

      - name: Generate checksum
        shell: bash
        run: |
          sha256sum ./${{ env.APP_NAME }}_${{ matrix.os }}_${{ matrix.architecture }}${FILE_EXTENSION} | cut -d " " -f 1 > ./${{ env.APP_NAME }}_${{ matrix.os }}_${{ matrix.architecture }}${{ env.FILE_EXTENSION }}.sha256

      - name: Upload checksum artifact
        uses: 'actions/upload-artifact@v2'
        with:
            name: artifact_${{ env.APP_NAME }}_${{ matrix.os }}_${{ matrix.architecture }}.sha256
            path: ./${{ env.APP_NAME }}_${{ matrix.os }}_${{ matrix.architecture }}${{ env.FILE_EXTENSION }}.sha256

      - name: Delete version-tag when build fails
        if: failure()
        shell: bash
        run: |
          git config --global user.name 'GithubActions'
          git config --global user.email 'githubactions@users.noreply.github.com'
          git push --delete origin ${{ env.RELEASE_TAG }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables
        shell: bash
        run: |
          echo "APP_NAME=${PWD##*/}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2.3.2
        with:
          ref: main

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Move all artifacts to the current directory
        shell: bash
        run: |
          mv ./*/${{ env.APP_NAME }}_* ./
          rm -dr ./*/

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.md
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            ${{ env.APP_NAME }}_*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
